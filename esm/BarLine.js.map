{"version":3,"file":"BarLine.js","sources":["../src/BarLine.js"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport head from 'ramda/src/head';\nimport identity from 'ramda/src/identity';\nimport { axisBottom as d3AxisBottom, axisLeft as d3AxisLeft } from 'd3-axis';\nimport { select as d3Select } from 'd3-selection';\nimport { line as d3Line } from 'd3-shape';\nimport {\n  Axis,\n  Grid,\n  Label,\n  LineDatum,\n  StackedBarDatum,\n  SVG,\n} from './components';\nimport {\n  buildStack,\n  debounce,\n  drawGrid,\n  extendXPath,\n  getId,\n  getLineDataForSeries,\n  getMax,\n  getStackedMax,\n  getSize,\n  getXScale,\n  getYScale,\n  palette,\n  rotateXLabels,\n  setLineType,\n  setupData,\n  toStackedForm,\n  toSingleForm,\n} from './utils';\nimport {\n  ASPECT_RATIO,\n  LINE_TYPE,\n  MARGIN,\n  ROTATION,\n  SCALE_BAND,\n  SCALE_LINEAR,\n  SCALE_TIME,\n  SECONDARY_THEME,\n  SIZE,\n  THEME,\n  TICKS,\n} from './utils/constants';\n\nconst BarLine = ({\n  aspectRatio = ASPECT_RATIO,\n  data: chartData,\n  grid,\n  height: svgHeight = undefined,\n  isHorizontal,\n  lineSeries = [],\n  lineType = LINE_TYPE,\n  lineTypeOption = null,\n  margin = MARGIN,\n  onClick = identity,\n  onMouseEnter = identity,\n  onMouseLeave = identity,\n  responsive = false,\n  secondaryTheme = SECONDARY_THEME,\n  stackedSeries = [],\n  theme = THEME,\n  ticks = TICKS,\n  width: svgWidth = undefined,\n  xAxisLabel,\n  xAxisLabelRotation,\n  xAxisLabelRotationValue = ROTATION,\n  yAxisLabel,\n}) => {\n  const svgRef = useRef();\n  const [id] = useState(getId('bar-line'));\n  const [{ width, height, isSizeSet }, setSize] = useState(SIZE);\n  const [isDates, data] = useMemo(() => setupData(chartData), chartData);\n  const stack = useMemo(\n    () => buildStack(stackedSeries)(toStackedForm(data)),\n    data\n  );\n\n  const xScale = getXScale(\n    isDates ? SCALE_TIME : SCALE_BAND,\n    data,\n    width,\n    true\n  );\n  const yScale = getYScale(\n    SCALE_LINEAR,\n    getMax(getStackedMax(data, stackedSeries)),\n    height\n  );\n\n  const line = d3Line()\n    .curve(setLineType(lineType, lineTypeOption))\n    .x(({ name }) =>\n      isDates ? xScale(name) : xScale(name) + xScale.bandwidth() / 2\n    )\n    .y(({ value }) => yScale(value));\n\n  const lineData = getLineDataForSeries(lineSeries, data);\n\n  const handleSize = () => {\n    const offsetWidth = svgRef.current.parentElement.offsetWidth;\n    if ((svgWidth || svgHeight) && !isSizeSet) {\n      setSize({\n        ...getSize(svgWidth, svgHeight, margin, aspectRatio),\n        isSizeSet: true,\n      });\n    } else if (offsetWidth !== svgWidth - (margin.left + margin.right)) {\n      setSize({\n        ...getSize(offsetWidth, undefined, margin, aspectRatio),\n        isSizeSet: true,\n      });\n    }\n  };\n\n  const handleResize = debounce(handleSize)();\n\n  useEffect(() => {\n    handleSize();\n    responsive && window.addEventListener('resize', handleResize);\n\n    return () => {\n      responsive && window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return (\n    <SVG\n      identifier={id}\n      size={{\n        width: svgWidth || width + margin.left + margin.right,\n        height: svgHeight || height + margin.top + margin.bottom,\n      }}\n      ref={svgRef}\n    >\n      <g\n        className=\"silky-charts-container\"\n        transform={`translate(${margin.left}, ${margin.top})`}\n      >\n        {grid && (\n          <Grid\n            ref={node =>\n              d3Select(node).call(\n                drawGrid(isHorizontal, xScale, height, yScale, width, ticks)\n              )\n            }\n          />\n        )}\n\n        {xAxisLabel && (\n          <Label axis=\"x\" margin={margin} width={width} height={height}>\n            {xAxisLabel}\n          </Label>\n        )}\n\n        {yAxisLabel && (\n          <Label axis=\"y\" margin={margin} width={width} height={height}>\n            {yAxisLabel}\n          </Label>\n        )}\n\n        <StackedBarDatum\n          data={data}\n          series={stack}\n          isDates={isDates}\n          theme={theme}\n          x={xScale}\n          y={yScale}\n          width={width}\n          height={height}\n          onClick={onClick}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n        />\n\n        <Axis\n          axis=\"x\"\n          position={{ x: 0, y: height }}\n          ref={node => {\n            d3Select(node).call(d3AxisBottom(xScale));\n            isDates && extendXPath(id, width);\n            xAxisLabelRotation && rotateXLabels(id, xAxisLabelRotationValue);\n          }}\n        />\n        <Axis\n          axis=\"y\"\n          ref={node => d3Select(node).call(d3AxisLeft(yScale).ticks(ticks))}\n        />\n\n        {lineData.map((datum, idx) => (\n          <g className={`${head(datum)['series']}-layer`} key={idx}>\n            <LineDatum\n              chart=\"bar-line\"\n              data={datum}\n              isDates={isDates}\n              color={palette.themes[secondaryTheme].base[idx]}\n              d={line(datum)}\n              xScale={xScale}\n              yScale={yScale}\n              onClick={onClick}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n            />\n          </g>\n        ))}\n      </g>\n    </SVG>\n  );\n};\n\nexport default BarLine;\n"],"names":["aspectRatio","ASPECT_RATIO","chartData","data","grid","height","svgHeight","undefined","isHorizontal","lineSeries","lineType","LINE_TYPE","lineTypeOption","margin","MARGIN","onClick","identity","onMouseEnter","onMouseLeave","responsive","secondaryTheme","SECONDARY_THEME","stackedSeries","theme","THEME","ticks","TICKS","width","svgWidth","xAxisLabel","xAxisLabelRotation","xAxisLabelRotationValue","ROTATION","yAxisLabel","svgRef","useRef","useState","getId","id","SIZE","isSizeSet","setSize","useMemo","setupData","isDates","stack","buildStack","toStackedForm","xScale","getXScale","SCALE_TIME","SCALE_BAND","yScale","getYScale","SCALE_LINEAR","getMax","getStackedMax","line","d3Line","curve","setLineType","x","name","bandwidth","y","value","lineData","getLineDataForSeries","handleSize","offsetWidth","current","parentElement","left","right","getSize","handleResize","debounce","useEffect","window","addEventListener","removeEventListener","React","SVG","identifier","size","top","bottom","ref","className","transform","Grid","node","d3Select","call","drawGrid","Label","axis","StackedBarDatum","series","Axis","position","d3AxisBottom","extendXPath","rotateXLabels","d3AxisLeft","map","datum","idx","head","key","LineDatum","chart","color","palette","themes","base","d"],"mappings":"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"}