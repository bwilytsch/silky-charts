{"version":3,"file":"StackedArea.js","sources":["../src/StackedArea.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { axisBottom as d3AxisBottom, axisLeft as d3AxisLeft } from 'd3-axis';\nimport {\n  scaleTime as d3ScaleTime,\n  scaleLinear as d3ScaleLinear,\n} from 'd3-scale';\nimport { select as d3Select } from 'd3-selection';\nimport { area as d3Area } from 'd3-shape';\nimport { timeFormat as d3TimeFormat } from 'd3-time-format';\nimport identity from 'ramda/src/identity';\nimport {\n  Axis,\n  DataSource,\n  Grid,\n  Label,\n  MainGroup,\n  Path,\n  SVG,\n  Title,\n} from './components';\nimport useResize from './hooks/useResize';\nimport {\n  appendStackedValues,\n  buildStack,\n  bySeries,\n  classify,\n  drawGrid,\n  extent,\n  getId,\n  getMax,\n  getStackedMax,\n  getSeries,\n  getSize,\n  palette,\n  rotateXLabels,\n  setLineType,\n  setupData,\n  toStackedForm,\n} from './utils';\nimport {\n  ASPECT_RATIO,\n  LINE_TYPE,\n  MARGIN,\n  ROTATION,\n  SIZE,\n  THEME,\n  TIME_FORMAT,\n  X_TICKS,\n  Y_TICKS,\n} from './utils/constants';\n\nconst StackedArea = ({\n  aspectRatio = ASPECT_RATIO,\n  data: chartData,\n  dataSource,\n  dateFormat = TIME_FORMAT,\n  grid,\n  height: svgHeight = undefined,\n  horizontal,\n  lineType = LINE_TYPE,\n  lineTypeOption = null,\n  margin = MARGIN,\n  onClick = identity,\n  onMouseEnter = identity,\n  onMouseLeave = identity,\n  responsive = false,\n  theme = THEME,\n  title,\n  width: svgWidth = undefined,\n  xAxisChartLabel,\n  xAxisLabelRotation,\n  xAxisLabelRotationValue = ROTATION,\n  xAxisTicks = X_TICKS,\n  yAxisChartLabel,\n  yAxisTicks = Y_TICKS,\n}) => {\n  const svgRef = useRef(null);\n  const [id] = useState(getId('stacked-area'));\n  const timeFormat = d3TimeFormat(dateFormat);\n  const [{ width, height, isSizeSet }, setSize] = useState(SIZE);\n  let [isDates, data] = setupData(chartData);\n  data = appendStackedValues(\n    buildStack(getSeries(data))(toStackedForm(data)),\n    data\n  );\n\n  if (!isDates) {\n    throw new TypeError(\n      'StackedArea charts only accept valid dates in the \"name\" section of the dataset.'\n    );\n  }\n\n  const xScale = d3ScaleTime()\n    .domain(extent(data.map(({ name }) => name)))\n    .range([0, width]);\n\n  const yScale = d3ScaleLinear()\n    .domain([0, getMax(getStackedMax(data))])\n    .range([height, 0]);\n\n  const area = d3Area()\n    .curve(setLineType(lineType, lineTypeOption))\n    .x(({ name }) => xScale(name))\n    .y0(({ stackedValues }) => yScale(stackedValues[0]))\n    .y1(({ stackedValues }) => yScale(stackedValues[1]));\n\n  const handleSize = () => {\n    const offsetWidth = svgRef.current.parentElement.offsetWidth;\n    if ((svgWidth || svgHeight) && !isSizeSet) {\n      setSize({\n        ...getSize(svgWidth, svgHeight, margin, aspectRatio),\n        isSizeSet: true,\n      });\n    } else if (offsetWidth !== svgWidth - (margin.left + margin.right)) {\n      setSize({\n        ...getSize(offsetWidth, undefined, margin, aspectRatio),\n        isSizeSet: true,\n      });\n    }\n  };\n\n  useResize(responsive, handleSize);\n\n  return (\n    <SVG\n      identifier={id}\n      size={{\n        width: svgWidth || width + margin.left + margin.right,\n        height: svgHeight || height + margin.top + margin.bottom,\n      }}\n      ref={svgRef}\n    >\n      <MainGroup margin={margin}>\n        {grid && (\n          <Grid\n            ref={node =>\n              d3Select(node).call(\n                drawGrid(\n                  horizontal,\n                  xScale,\n                  height,\n                  yScale,\n                  width,\n                  xAxisTicks,\n                  yAxisTicks\n                )\n              )\n            }\n          />\n        )}\n\n        {title && (\n          <Title margin={margin} width={width}>\n            {title}\n          </Title>\n        )}\n\n        {xAxisChartLabel && (\n          <Label axis=\"x\" margin={margin} width={width} height={height}>\n            {xAxisChartLabel}\n          </Label>\n        )}\n\n        {yAxisChartLabel && (\n          <Label axis=\"y\" margin={margin} width={width} height={height}>\n            {yAxisChartLabel}\n          </Label>\n        )}\n\n        {dataSource && (\n          <DataSource\n            dataSource={dataSource}\n            height={height}\n            margin={margin}\n            width={width}\n          />\n        )}\n\n        {bySeries(data).map(([series, datum], idx) => (\n          <g className={`${classify(series)}-layer`} key={idx}>\n            <Path\n              chart=\"stacked-area\"\n              fillColor={palette.themes[theme][idx]}\n              d={area(datum)}\n              strokeWidth={0}\n              onClick={onClick}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n            />\n          </g>\n        ))}\n\n        <Axis\n          axis=\"x\"\n          position={{ x: 0, y: height }}\n          ref={node => {\n            d3Select(node).call(\n              d3AxisBottom(xScale)\n                .ticks(xAxisTicks)\n                .tickFormat(isDates ? timeFormat : null)\n            );\n            xAxisLabelRotation && rotateXLabels(id, xAxisLabelRotationValue);\n          }}\n        />\n\n        <Axis\n          axis=\"y\"\n          ref={node =>\n            d3Select(node).call(d3AxisLeft(yScale).ticks(yAxisTicks))\n          }\n        />\n      </MainGroup>\n    </SVG>\n  );\n};\n\nexport default StackedArea;\n"],"names":["StackedArea","aspectRatio","ASPECT_RATIO","chartData","data","dataSource","dateFormat","TIME_FORMAT","grid","height","svgHeight","undefined","horizontal","lineType","LINE_TYPE","lineTypeOption","margin","MARGIN","onClick","identity","onMouseEnter","onMouseLeave","responsive","theme","THEME","title","width","svgWidth","xAxisChartLabel","xAxisLabelRotation","xAxisLabelRotationValue","ROTATION","xAxisTicks","X_TICKS","yAxisChartLabel","yAxisTicks","Y_TICKS","svgRef","useRef","useState","getId","id","timeFormat","d3TimeFormat","SIZE","isSizeSet","setSize","setupData","isDates","appendStackedValues","buildStack","getSeries","toStackedForm","TypeError","xScale","d3ScaleTime","domain","extent","map","name","range","yScale","d3ScaleLinear","getMax","getStackedMax","area","d3Area","curve","setLineType","x","y0","stackedValues","y1","handleSize","offsetWidth","current","parentElement","getSize","left","right","useResize","top","bottom","node","d3Select","call","drawGrid","bySeries","idx","series","datum","classify","palette","themes","y","d3AxisBottom","ticks","tickFormat","rotateXLabels","d3AxisLeft"],"mappings":"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"}