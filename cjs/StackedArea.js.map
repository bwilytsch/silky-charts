{"version":3,"file":"StackedArea.js","sources":["../src/StackedArea.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { axisBottom as d3AxisBottom, axisLeft as d3AxisLeft } from 'd3-axis';\nimport {\n  scaleTime as d3ScaleTime,\n  scaleLinear as d3ScaleLinear,\n} from 'd3-scale';\nimport { select as d3Select } from 'd3-selection';\nimport { area as d3Area } from 'd3-shape';\nimport { timeFormat as d3TimeFormat } from 'd3-time-format';\nimport identity from 'ramda/src/identity';\nimport {\n  AreaDatum,\n  Axis,\n  DataSource,\n  Grid,\n  Label,\n  MainGroup,\n  SVG,\n  Title,\n} from './components';\nimport useResize from './hooks/useResize';\nimport {\n  appendStackedValues,\n  buildStack,\n  bySeries,\n  drawGrid,\n  extent,\n  getId,\n  getMax,\n  getStackedMax,\n  getSeries,\n  getSize,\n  mapTooltipData,\n  palette,\n  rotateXLabels,\n  setLineType,\n  setupData,\n  toStackedForm,\n} from './utils';\nimport {\n  ASPECT_RATIO,\n  LINE_TYPE,\n  MARGIN,\n  ROTATION,\n  SIZE,\n  THEME,\n  TIME_FORMAT,\n  X_TICKS,\n  Y_TICKS,\n} from './utils/constants';\n\nconst StackedArea = ({\n  aspectRatio = ASPECT_RATIO,\n  data: chartData,\n  dataSource,\n  dateFormat = TIME_FORMAT,\n  grid,\n  height: svgHeight = undefined,\n  horizontal,\n  lineType = LINE_TYPE,\n  lineTypeOption = null,\n  margin = MARGIN,\n  onClick = identity,\n  onMouseEnter = identity,\n  onMouseLeave = identity,\n  responsive = false,\n  theme = THEME,\n  title,\n  tooltip,\n  width: svgWidth = undefined,\n  xAxisChartLabel,\n  xAxisLabelRotation,\n  xAxisLabelRotationValue = ROTATION,\n  xAxisTicks = X_TICKS,\n  yAxisChartLabel,\n  yAxisTicks = Y_TICKS,\n}) => {\n  const svgRef = useRef(null);\n  const [id] = useState(getId('stacked-area'));\n  const timeFormat = d3TimeFormat(dateFormat);\n  const [{ width, height, isSizeSet }, setSize] = useState(SIZE);\n  let [isDates, data, names] = setupData(chartData);\n  data = appendStackedValues(\n    buildStack(getSeries(data))(toStackedForm(data)),\n    data\n  );\n\n  if (!isDates) {\n    throw new TypeError(\n      'StackedArea charts only accept valid dates in the \"name\" section of the dataset.'\n    );\n  }\n\n  const xScale = d3ScaleTime()\n    .domain(extent(data.map(({ name }) => name)))\n    .range([0, width]);\n\n  const yScale = d3ScaleLinear()\n    .domain([0, getMax(getStackedMax(data))])\n    .range([height, 0]);\n\n  const area = d3Area()\n    .curve(setLineType(lineType, lineTypeOption))\n    .x(({ name }) => xScale(name))\n    .y0(({ stackedValues }) => yScale(stackedValues[0]))\n    .y1(({ stackedValues }) => yScale(stackedValues[1]));\n\n  const dataPositions = names.map(name => xScale(name));\n  const tooltipData = mapTooltipData(data, dataPositions);\n\n  const handleSize = () => {\n    const offsetWidth = svgRef.current.parentElement.offsetWidth;\n    if ((svgWidth || svgHeight) && !isSizeSet) {\n      setSize({\n        ...getSize(svgWidth, svgHeight, margin, aspectRatio),\n        isSizeSet: true,\n      });\n    } else if (offsetWidth !== svgWidth - (margin.left + margin.right)) {\n      setSize({\n        ...getSize(offsetWidth, undefined, margin, aspectRatio),\n        isSizeSet: true,\n      });\n    }\n  };\n\n  useResize(responsive, handleSize);\n\n  return (\n    <SVG\n      identifier={id}\n      size={{\n        width: svgWidth || width + margin.left + margin.right,\n        height: svgHeight || height + margin.top + margin.bottom,\n      }}\n      ref={svgRef}\n    >\n      <MainGroup margin={margin}>\n        {grid && (\n          <Grid\n            ref={node =>\n              d3Select(node).call(\n                drawGrid(\n                  horizontal,\n                  xScale,\n                  height,\n                  yScale,\n                  width,\n                  xAxisTicks,\n                  yAxisTicks\n                )\n              )\n            }\n          />\n        )}\n\n        {title && (\n          <Title margin={margin} width={width}>\n            {title}\n          </Title>\n        )}\n\n        {xAxisChartLabel && (\n          <Label axis=\"x\" margin={margin} width={width} height={height}>\n            {xAxisChartLabel}\n          </Label>\n        )}\n\n        {yAxisChartLabel && (\n          <Label axis=\"y\" margin={margin} width={width} height={height}>\n            {yAxisChartLabel}\n          </Label>\n        )}\n\n        {dataSource && (\n          <DataSource\n            dataSource={dataSource}\n            height={height}\n            margin={margin}\n            width={width}\n          />\n        )}\n\n        {bySeries(data).map(([series, datum], idx) => (\n          <AreaDatum\n            area={area}\n            dataPositions={dataPositions}\n            datum={datum}\n            fillColor={palette.themes[theme][idx]}\n            key={idx}\n            margin={margin}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            series={series}\n            svg={svgRef.current}\n            theme={theme}\n            tooltip={tooltip}\n            tooltipData={tooltipData}\n          />\n        ))}\n\n        <Axis\n          axis=\"x\"\n          position={{ x: 0, y: height }}\n          ref={node => {\n            d3Select(node).call(\n              d3AxisBottom(xScale)\n                .ticks(xAxisTicks)\n                .tickFormat(isDates ? timeFormat : null)\n            );\n            xAxisLabelRotation && rotateXLabels(id, xAxisLabelRotationValue);\n          }}\n        />\n\n        <Axis\n          axis=\"y\"\n          ref={node =>\n            d3Select(node).call(d3AxisLeft(yScale).ticks(yAxisTicks))\n          }\n        />\n      </MainGroup>\n    </SVG>\n  );\n};\n\nexport default StackedArea;\n"],"names":["StackedArea","aspectRatio","ASPECT_RATIO","chartData","data","dataSource","dateFormat","TIME_FORMAT","grid","height","svgHeight","undefined","horizontal","lineType","LINE_TYPE","lineTypeOption","margin","MARGIN","onClick","identity","onMouseEnter","onMouseLeave","responsive","theme","THEME","title","tooltip","width","svgWidth","xAxisChartLabel","xAxisLabelRotation","xAxisLabelRotationValue","ROTATION","xAxisTicks","X_TICKS","yAxisChartLabel","yAxisTicks","Y_TICKS","svgRef","useRef","useState","getId","id","timeFormat","d3TimeFormat","SIZE","isSizeSet","setSize","setupData","isDates","names","appendStackedValues","buildStack","getSeries","toStackedForm","TypeError","xScale","d3ScaleTime","domain","extent","map","name","range","yScale","d3ScaleLinear","getMax","getStackedMax","area","d3Area","curve","setLineType","x","y0","stackedValues","y1","dataPositions","tooltipData","mapTooltipData","handleSize","offsetWidth","current","parentElement","getSize","left","right","useResize","React","SVG","top","bottom","MainGroup","Grid","node","d3Select","call","drawGrid","Title","Label","DataSource","bySeries","idx","series","datum","AreaDatum","palette","themes","Axis","y","d3AxisBottom","ticks","tickFormat","rotateXLabels","d3AxisLeft"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,IAAMA,WAAW,GAAG,SAAdA,WAAc,OAyBd;8BAxBJC,WAwBI;MAxBJA,WAwBI,iCAxBUC,sBAwBV;MAvBEC,SAuBF,QAvBJC,IAuBI;MAtBJC,UAsBI,QAtBJA,UAsBI;6BArBJC,UAqBI;MArBJA,UAqBI,gCArBSC,qBAqBT;MApBJC,IAoBI,QApBJA,IAoBI;yBAnBJC,MAmBI;MAnBIC,SAmBJ,4BAnBgBC,SAmBhB;MAlBJC,UAkBI,QAlBJA,UAkBI;2BAjBJC,QAiBI;MAjBJA,QAiBI,8BAjBOC,mBAiBP;iCAhBJC,cAgBI;MAhBJA,cAgBI,oCAhBa,IAgBb;yBAfJC,MAeI;MAfJA,MAeI,4BAfKC,gBAeL;0BAdJC,OAcI;MAdJA,OAcI,6BAdMC,QAcN;+BAbJC,YAaI;MAbJA,YAaI,kCAbWD,QAaX;+BAZJE,YAYI;MAZJA,YAYI,kCAZWF,QAYX;6BAXJG,UAWI;MAXJA,UAWI,gCAXS,KAWT;wBAVJC,KAUI;MAVJA,KAUI,2BAVIC,eAUJ;MATJC,KASI,QATJA,KASI;MARJC,OAQI,QARJA,OAQI;wBAPJC,KAOI;MAPGC,QAOH,2BAPcjB,SAOd;MANJkB,eAMI,QANJA,eAMI;MALJC,kBAKI,QALJA,kBAKI;mCAJJC,uBAII;MAJJA,uBAII,sCAJsBC,kBAItB;6BAHJC,UAGI;MAHJA,UAGI,gCAHSC,iBAGT;MAFJC,eAEI,QAFJA,eAEI;6BADJC,UACI;MADJA,UACI,gCADSC,iBACT;MACEC,MAAM,GAAGC,YAAM,CAAC,IAAD,CAArB;;kBACaC,cAAQ,CAACC,eAAK,CAAC,cAAD,CAAN,CAFjB;;MAEGC,EAFH;;MAGEC,UAAU,GAAGC,uBAAY,CAACtC,UAAD,CAA/B;;mBACgDkC,cAAQ,CAACK,cAAD,CAJpD;;;MAIKlB,KAJL,eAIKA,KAJL;MAIYlB,MAJZ,eAIYA,MAJZ;MAIoBqC,SAJpB,eAIoBA,SAJpB;MAIiCC,OAJjC;;mBAKyBC,mBAAS,CAAC7C,SAAD,CALlC;;MAKC8C,OALD;MAKU7C,IALV;MAKgB8C,KALhB;;EAMJ9C,IAAI,GAAG+C,6BAAmB,CACxBC,oBAAU,CAACC,mBAAS,CAACjD,IAAD,CAAV,CAAV,CAA4BkD,uBAAa,CAAClD,IAAD,CAAzC,CADwB,EAExBA,IAFwB,CAA1B;;MAKI,CAAC6C,OAAL,EAAc;UACN,IAAIM,SAAJ,CACJ,kFADI,CAAN;;;MAKIC,MAAM,GAAGC,iBAAW,GACvBC,MADY,CACLC,gBAAM,CAACvD,IAAI,CAACwD,GAAL,CAAS;QAAGC,IAAH,SAAGA,IAAH;WAAcA,IAAd;GAAT,CAAD,CADD,EAEZC,KAFY,CAEN,CAAC,CAAD,EAAInC,KAAJ,CAFM,CAAf;MAIMoC,MAAM,GAAGC,mBAAa,GACzBN,MADY,CACL,CAAC,CAAD,EAAIO,gBAAM,CAACC,uBAAa,CAAC9D,IAAD,CAAd,CAAV,CADK,EAEZ0D,KAFY,CAEN,CAACrD,MAAD,EAAS,CAAT,CAFM,CAAf;MAIM0D,IAAI,GAAGC,YAAM,GAChBC,KADU,CACJC,qBAAW,CAACzD,QAAD,EAAWE,cAAX,CADP,EAEVwD,CAFU,CAER;QAAGV,IAAH,SAAGA,IAAH;WAAcL,MAAM,CAACK,IAAD,CAApB;GAFQ,EAGVW,EAHU,CAGP;QAAGC,aAAH,SAAGA,aAAH;WAAuBV,MAAM,CAACU,aAAa,CAAC,CAAD,CAAd,CAA7B;GAHO,EAIVC,EAJU,CAIP;QAAGD,aAAH,SAAGA,aAAH;WAAuBV,MAAM,CAACU,aAAa,CAAC,CAAD,CAAd,CAA7B;GAJO,CAAb;MAMME,aAAa,GAAGzB,KAAK,CAACU,GAAN,CAAU,UAAAC,IAAI;WAAIL,MAAM,CAACK,IAAD,CAAV;GAAd,CAAtB;MACMe,WAAW,GAAGC,wBAAc,CAACzE,IAAD,EAAOuE,aAAP,CAAlC;;MAEMG,UAAU,GAAG,SAAbA,UAAa,GAAM;QACjBC,WAAW,GAAGzC,MAAM,CAAC0C,OAAP,CAAeC,aAAf,CAA6BF,WAAjD;;QACI,CAACnD,QAAQ,IAAIlB,SAAb,KAA2B,CAACoC,SAAhC,EAA2C;MACzCC,OAAO,6BACFmC,iBAAO,CAACtD,QAAD,EAAWlB,SAAX,EAAsBM,MAAtB,EAA8Bf,WAA9B,CADL;QAEL6C,SAAS,EAAE;SAFb;KADF,MAKO,IAAIiC,WAAW,KAAKnD,QAAQ,IAAIZ,MAAM,CAACmE,IAAP,GAAcnE,MAAM,CAACoE,KAAzB,CAA5B,EAA6D;MAClErC,OAAO,6BACFmC,iBAAO,CAACH,WAAD,EAAcpE,SAAd,EAAyBK,MAAzB,EAAiCf,WAAjC,CADL;QAEL6C,SAAS,EAAE;SAFb;;GARJ;;EAeAuC,mBAAS,CAAC/D,UAAD,EAAawD,UAAb,CAAT;SAGEQ,6BAACC,aAAD;IACE,UAAU,EAAE7C,EADd;IAEE,IAAI,EAAE;MACJf,KAAK,EAAEC,QAAQ,IAAID,KAAK,GAAGX,MAAM,CAACmE,IAAf,GAAsBnE,MAAM,CAACoE,KAD5C;MAEJ3E,MAAM,EAAEC,SAAS,IAAID,MAAM,GAAGO,MAAM,CAACwE,GAAhB,GAAsBxE,MAAM,CAACyE;KAJtD;IAME,GAAG,EAAEnD;KAELgD,6BAACI,mBAAD;IAAW,MAAM,EAAE1E;KAChBR,IAAI,IACH8E,6BAACK,cAAD;IACE,GAAG,EAAE,aAAAC,IAAI;aACPC,kBAAQ,CAACD,IAAD,CAAR,CAAeE,IAAf,CACEC,kBAAQ,CACNnF,UADM,EAEN4C,MAFM,EAGN/C,MAHM,EAINsD,MAJM,EAKNpC,KALM,EAMNM,UANM,EAONG,UAPM,CADV,CADO;;IAHf,EAmBGX,KAAK,IACJ6D,6BAACU,eAAD;IAAO,MAAM,EAAEhF,MAAf;IAAuB,KAAK,EAAEW;KAC3BF,KADH,CApBJ,EAyBGI,eAAe,IACdyD,6BAACW,eAAD;IAAO,IAAI,EAAC,GAAZ;IAAgB,MAAM,EAAEjF,MAAxB;IAAgC,KAAK,EAAEW,KAAvC;IAA8C,MAAM,EAAElB;KACnDoB,eADH,CA1BJ,EA+BGM,eAAe,IACdmD,6BAACW,eAAD;IAAO,IAAI,EAAC,GAAZ;IAAgB,MAAM,EAAEjF,MAAxB;IAAgC,KAAK,EAAEW,KAAvC;IAA8C,MAAM,EAAElB;KACnD0B,eADH,CAhCJ,EAqCG9B,UAAU,IACTiF,6BAACY,oBAAD;IACE,UAAU,EAAE7F,UADd;IAEE,MAAM,EAAEI,MAFV;IAGE,MAAM,EAAEO,MAHV;IAIE,KAAK,EAAEW;IA1Cb,EA8CGwE,kBAAQ,CAAC/F,IAAD,CAAR,CAAewD,GAAf,CAAmB,iBAAkBwC,GAAlB;;QAAEC,MAAF;QAAUC,KAAV;;WAClBhB,6BAACiB,mBAAD;MACE,IAAI,EAAEpC,IADR;MAEE,aAAa,EAAEQ,aAFjB;MAGE,KAAK,EAAE2B,KAHT;MAIE,SAAS,EAAEE,iBAAO,CAACC,MAAR,CAAelF,KAAf,EAAsB6E,GAAtB,CAJb;MAKE,GAAG,EAAEA,GALP;MAME,MAAM,EAAEpF,MANV;MAOE,OAAO,EAAEE,OAPX;MAQE,YAAY,EAAEE,YARhB;MASE,YAAY,EAAEC,YAThB;MAUE,MAAM,EAAEgF,MAVV;MAWE,GAAG,EAAE/D,MAAM,CAAC0C,OAXd;MAYE,KAAK,EAAEzD,KAZT;MAaE,OAAO,EAAEG,OAbX;MAcE,WAAW,EAAEkD;MAfG;GAAnB,CA9CH,EAiEEU,6BAACoB,cAAD;IACE,IAAI,EAAC,GADP;IAEE,QAAQ,EAAE;MAAEnC,CAAC,EAAE,CAAL;MAAQoC,CAAC,EAAElG;KAFvB;IAGE,GAAG,EAAE,aAAAmF,IAAI,EAAI;MACXC,kBAAQ,CAACD,IAAD,CAAR,CAAeE,IAAf,CACEc,iBAAY,CAACpD,MAAD,CAAZ,CACGqD,KADH,CACS5E,UADT,EAEG6E,UAFH,CAEc7D,OAAO,GAAGN,UAAH,GAAgB,IAFrC,CADF;MAKAb,kBAAkB,IAAIiF,uBAAa,CAACrE,EAAD,EAAKX,uBAAL,CAAnC;;IA1EN,EA8EEuD,6BAACoB,cAAD;IACE,IAAI,EAAC,GADP;IAEE,GAAG,EAAE,aAAAd,IAAI;aACPC,kBAAQ,CAACD,IAAD,CAAR,CAAeE,IAAf,CAAoBkB,eAAU,CAACjD,MAAD,CAAV,CAAmB8C,KAAnB,CAAyBzE,UAAzB,CAApB,CADO;;IAhFb,CARF,CADF;CA5EF;;;;"}