{"version":3,"file":"StackedArea.js","sources":["../src/StackedArea.js"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport identity from 'ramda/src/identity';\nimport { axisBottom as d3AxisBottom, axisLeft as d3AxisLeft } from 'd3-axis';\nimport { select as d3Select } from 'd3-selection';\nimport { area as d3Area } from 'd3-shape';\nimport { Axis, Grid, Label, Path, SVG } from './components';\nimport {\n  appendStackedValues,\n  buildStack,\n  bySeries,\n  classify,\n  debounce,\n  drawGrid,\n  getId,\n  getMax,\n  getStackedMax,\n  getSeries,\n  getSize,\n  getXScale,\n  getYScale,\n  palette,\n  rotateXLabels,\n  setLineType,\n  setupData,\n  toStackedForm,\n} from './utils';\nimport {\n  ASPECT_RATIO,\n  LINE_TYPE,\n  MARGIN,\n  ROTATION,\n  SCALE_BAND,\n  SCALE_LINEAR,\n  SCALE_TIME,\n  SIZE,\n  THEME,\n  TICKS,\n} from './utils/constants';\n\nconst StackedArea = ({\n  aspectRatio = ASPECT_RATIO,\n  data: chartData,\n  grid,\n  height: svgHeight = undefined,\n  isHorizontal,\n  lineSeries = [],\n  lineType = LINE_TYPE,\n  lineTypeOption = null,\n  margin = MARGIN,\n  onClick = identity,\n  onMouseEnter = identity,\n  onMouseLeave = identity,\n  responsive = false,\n  theme = THEME,\n  ticks = TICKS,\n  width: svgWidth = undefined,\n  xAxisLabel,\n  xAxisLabelRotation,\n  xAxisLabelRotationValue = ROTATION,\n  yAxisLabel,\n}) => {\n  const svgRef = useRef();\n  const [id] = useState(getId('stacked-area'));\n  const [{ width, height, isSizeSet }, setSize] = useState(SIZE);\n  let [isDates, data] = useMemo(() => setupData(chartData), chartData);\n  data = useMemo(\n    () =>\n      appendStackedValues(\n        buildStack(getSeries(data))(toStackedForm(data)),\n        data\n      ),\n    data\n  );\n\n  const xScale = getXScale(isDates ? SCALE_TIME : SCALE_BAND, data, width);\n  const yScale = getYScale(SCALE_LINEAR, getMax(getStackedMax(data)), height);\n\n  const area = d3Area()\n    .curve(setLineType(lineType, lineTypeOption))\n    .x(({ name }) => xScale(name))\n    .y0(({ stackedValues }) => yScale(stackedValues[0]))\n    .y1(({ stackedValues }) => yScale(stackedValues[1]));\n\n  const handleSize = () => {\n    const offsetWidth = svgRef.current.parentElement.offsetWidth;\n    if ((svgWidth || svgHeight) && !isSizeSet) {\n      setSize({\n        ...getSize(svgWidth, svgHeight, margin, aspectRatio),\n        isSizeSet: true,\n      });\n    } else if (offsetWidth !== svgWidth - (margin.left + margin.right)) {\n      setSize({\n        ...getSize(offsetWidth, undefined, margin, aspectRatio),\n        isSizeSet: true,\n      });\n    }\n  };\n\n  const handleResize = debounce(handleSize)();\n\n  useEffect(() => {\n    handleSize();\n    responsive && window.addEventListener('resize', handleResize);\n\n    return () => {\n      responsive && window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return (\n    <SVG\n      identifier={id}\n      size={{\n        width: svgWidth || width + margin.left + margin.right,\n        height: svgHeight || height + margin.top + margin.bottom,\n      }}\n      ref={svgRef}\n    >\n      <g\n        className=\"silky-charts-container\"\n        transform={`translate(${margin.left}, ${margin.top})`}\n      >\n        {grid && (\n          <Grid\n            ref={node =>\n              d3Select(node).call(\n                drawGrid(isHorizontal, xScale, height, yScale, width, ticks)\n              )\n            }\n          />\n        )}\n\n        {xAxisLabel && (\n          <Label axis=\"x\" margin={margin} width={width} height={height}>\n            {xAxisLabel}\n          </Label>\n        )}\n\n        {yAxisLabel && (\n          <Label axis=\"y\" margin={margin} width={width} height={height}>\n            {yAxisLabel}\n          </Label>\n        )}\n\n        {bySeries(data).map(([series, datum], idx) => (\n          <g className={`${classify(series)}-layer`} key={idx}>\n            <Path\n              chart=\"stacked-area\"\n              fillColor={palette.themes[theme].base[idx]}\n              d={area(datum)}\n              strokeWidth={0}\n              onClick={onClick}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n            />\n          </g>\n        ))}\n\n        <Axis\n          axis=\"x\"\n          position={{ x: 0, y: height }}\n          ref={node => {\n            d3Select(node).call(d3AxisBottom(xScale));\n            xAxisLabelRotation && rotateXLabels(id, xAxisLabelRotationValue);\n          }}\n        />\n        <Axis\n          axis=\"y\"\n          ref={node => d3Select(node).call(d3AxisLeft(yScale).ticks(ticks))}\n        />\n      </g>\n    </SVG>\n  );\n};\n\nexport default StackedArea;\n"],"names":["StackedArea","aspectRatio","ASPECT_RATIO","chartData","data","grid","height","svgHeight","undefined","isHorizontal","lineSeries","lineType","LINE_TYPE","lineTypeOption","margin","MARGIN","onClick","identity","onMouseEnter","onMouseLeave","responsive","theme","THEME","ticks","TICKS","width","svgWidth","xAxisLabel","xAxisLabelRotation","xAxisLabelRotationValue","ROTATION","yAxisLabel","svgRef","useRef","useState","getId","id","SIZE","isSizeSet","setSize","useMemo","setupData","isDates","appendStackedValues","buildStack","getSeries","toStackedForm","xScale","getXScale","SCALE_TIME","SCALE_BAND","yScale","getYScale","SCALE_LINEAR","getMax","getStackedMax","area","d3Area","curve","setLineType","x","name","y0","stackedValues","y1","handleSize","offsetWidth","current","parentElement","left","right","getSize","handleResize","debounce","useEffect","window","addEventListener","removeEventListener","React","SVG","identifier","size","top","bottom","ref","className","transform","Grid","node","d3Select","call","drawGrid","Label","axis","bySeries","map","idx","series","datum","classify","key","Path","chart","fillColor","palette","themes","base","d","strokeWidth","Axis","position","y","d3AxisBottom","rotateXLabels","d3AxisLeft"],"mappings":"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"}