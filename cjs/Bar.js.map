{"version":3,"file":"Bar.js","sources":["../src/Bar.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport identity from 'ramda/src/identity';\nimport { axisBottom as d3AxisBottom, axisLeft as d3AxisLeft } from 'd3-axis';\nimport {\n  scaleBand as d3ScaleBand,\n  scaleLinear as d3ScaleLinear,\n} from 'd3-scale';\nimport { select as d3Select } from 'd3-selection';\nimport { timeFormat as d3TimeFormat } from 'd3-time-format';\nimport {\n  Axis,\n  BarDatum,\n  DataGroup,\n  Grid,\n  MainGroup,\n  Label,\n  SVG,\n} from './components';\nimport {\n  debounce,\n  drawGrid,\n  getBaseColor,\n  getId,\n  getMax,\n  getSize,\n  rotateXLabels,\n  setupData,\n} from './utils';\nimport {\n  ASPECT_RATIO,\n  MARGIN,\n  ROTATION,\n  SCALE_PADDING,\n  SIZE,\n  THEME,\n  TICKS,\n  TIME_FORMAT,\n} from './utils/constants';\n\nconst Bar = ({\n  aspectRatio = ASPECT_RATIO,\n  data: chartData,\n  dateFormat = TIME_FORMAT,\n  grid,\n  height: svgHeight = undefined,\n  isHorizontal,\n  margin = MARGIN,\n  onClick = identity,\n  onMouseEnter = identity,\n  onMouseLeave = identity,\n  responsive = false,\n  theme = THEME,\n  width: svgWidth = undefined,\n  xAxisLabel,\n  xAxisLabelRotation,\n  xAxisLabelRotationValue = ROTATION,\n  xAxisTicks = TICKS,\n  xScalePadding = SCALE_PADDING,\n  yAxisLabel,\n  yAxisTicks = TICKS,\n}) => {\n  const svgRef = useRef();\n  const [id] = useState(getId('bar'));\n  const timeFormat = d3TimeFormat(dateFormat);\n  const [{ width, height, isSizeSet }, setSize] = useState(SIZE);\n  const [isDates, data] = setupData(chartData);\n\n  const xScale = d3ScaleBand()\n    .domain(data.map(({ name }) => name))\n    .range([0, width])\n    .padding(xScalePadding);\n\n  const yScale = d3ScaleLinear()\n    .domain([0, getMax(data.map(({ value }) => value))])\n    .range([height, 0]);\n\n  const handleSize = () => {\n    const offsetWidth = svgRef.current.parentElement.offsetWidth;\n    if ((svgWidth || svgHeight) && !isSizeSet) {\n      setSize({\n        ...getSize(svgWidth, svgHeight, margin, aspectRatio),\n        isSizeSet: true,\n      });\n    } else if (offsetWidth !== svgWidth - (margin.left + margin.right)) {\n      setSize({\n        ...getSize(offsetWidth, undefined, margin, aspectRatio),\n        isSizeSet: true,\n      });\n    }\n  };\n\n  const handleResize = debounce(handleSize)();\n\n  useEffect(() => {\n    handleSize();\n    responsive && window.addEventListener('resize', handleResize);\n\n    return () => {\n      responsive && window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return (\n    <SVG\n      identifier={id}\n      size={{\n        width: svgWidth || width + margin.left + margin.right,\n        height: svgHeight || height + margin.top + margin.bottom,\n      }}\n      ref={svgRef}\n    >\n      <MainGroup margin={margin}>\n        {grid && (\n          <Grid\n            ref={node =>\n              d3Select(node).call(\n                drawGrid(\n                  isHorizontal,\n                  xScale,\n                  height,\n                  yScale,\n                  width,\n                  xAxisTicks,\n                  yAxisTicks\n                )\n              )\n            }\n          />\n        )}\n\n        {xAxisLabel && (\n          <Label axis=\"x\" margin={margin} width={width} height={height}>\n            {xAxisLabel}\n          </Label>\n        )}\n\n        {yAxisLabel && (\n          <Label axis=\"y\" margin={margin} width={width} height={height}>\n            {yAxisLabel}\n          </Label>\n        )}\n\n        <DataGroup>\n          {data.map(({ name, value }, idx) => (\n            <BarDatum\n              key={idx}\n              datum={{\n                name,\n                value,\n              }}\n              color={getBaseColor(theme)}\n              x={xScale(name)}\n              y={yScale(value)}\n              width={xScale.bandwidth()}\n              height={height - yScale(value)}\n              onClick={onClick}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n            />\n          ))}\n        </DataGroup>\n\n        <Axis\n          axis=\"x\"\n          position={{ x: 0, y: height }}\n          ref={node => {\n            d3Select(node).call(\n              d3AxisBottom(xScale)\n                .ticks(yAxisTicks)\n                .tickFormat(isDates ? timeFormat : null)\n            );\n            xAxisLabelRotation && rotateXLabels(id, xAxisLabelRotationValue);\n          }}\n        />\n        <Axis\n          axis=\"y\"\n          ref={node =>\n            d3Select(node).call(d3AxisLeft(yScale).ticks(yAxisTicks))\n          }\n        />\n      </MainGroup>\n    </SVG>\n  );\n};\n\nexport default Bar;\n"],"names":["Bar","aspectRatio","ASPECT_RATIO","chartData","data","dateFormat","TIME_FORMAT","grid","height","svgHeight","undefined","isHorizontal","margin","MARGIN","onClick","identity","onMouseEnter","onMouseLeave","responsive","theme","THEME","width","svgWidth","xAxisLabel","xAxisLabelRotation","xAxisLabelRotationValue","ROTATION","xAxisTicks","TICKS","xScalePadding","SCALE_PADDING","yAxisLabel","yAxisTicks","svgRef","useRef","useState","getId","id","timeFormat","d3TimeFormat","SIZE","isSizeSet","setSize","setupData","isDates","xScale","d3ScaleBand","domain","map","name","range","padding","yScale","d3ScaleLinear","getMax","value","handleSize","offsetWidth","current","parentElement","left","right","getSize","handleResize","debounce","useEffect","window","addEventListener","removeEventListener","React","SVG","identifier","size","top","bottom","ref","MainGroup","Grid","node","d3Select","call","drawGrid","Label","axis","DataGroup","idx","BarDatum","key","datum","color","getBaseColor","x","y","bandwidth","Axis","position","d3AxisBottom","ticks","tickFormat","rotateXLabels","d3AxisLeft"],"mappings":"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"}